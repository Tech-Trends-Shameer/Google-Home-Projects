/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/67c96eb4-123c-42fe-880d-61a1582aa862

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperatureSensor airquality;
  CloudTemperatureSensor humidity;
  CloudTemperatureSensor temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHT.h>
#include <Wire.h>

// Define your sensor pins
const int mq135Pin = A0; // MQ135 sensor connected to A0 on ESP8266
const int dhtPin = 2;    // DHT sensor connected to GPIO 2

// Include DHT library if using a DHT sensor for humidity/temperature
#define DHTTYPE DHT11
DHT dht(dhtPin, DHTTYPE);

// Initialize the LCD, set the I2C address (0x27 is common for I2C LCDs) and the dimensions
 

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
 
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

   // Initialize the DHT sensor
  dht.begin();

   
}

void loop() {
  ArduinoCloud.update();
  // Your code here
 
    // Read the DHT sensor for temperature and humidity
  float temp = dht.readTemperature();
  float humid = dht.readHumidity();

  // Read the MQ135 air quality sensor
  int airQualityValue = analogRead(mq135Pin);
  float airQuality = map(airQualityValue, 0, 1023, 0, 500); // Adjust based on calibration

  // Update the variables
  temperature = temp;        // Real temperature
  humidity = humid;   // Use "temperature2" for Humidity
  airquality = airQuality; // Use "temperature3" for Air Quality

  // Print data to Serial Monitor for verification
  Serial.print("Temperature: ");
  Serial.println(temp);
 
  Serial.print("Humidity: ");
  Serial.println(humid);
 
  Serial.print("Air Quality: ");
  Serial.println(airQuality);

   

  delay(2000); // Wait for 2 seconds before the next update
}


/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}

/*
  Since Airquality is READ_WRITE variable, onAirqualityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAirqualityChange()  {
  // Add your code here to act upon Airquality change
}
